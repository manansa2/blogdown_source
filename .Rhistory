pivot_wider(., names_from = year, values_from = c(min, mean, max, sd))
heartrate <-  df %>%
subset(., type == "HKQuantityTypeIdentifierHeartRate" & sourceName == 'Apple Watch' & (year %in% c(2019, 2020))) %>%
select(., c("type", "date", "value", "year")) %>%
mutate(., day = format(date,"%m-%d"))
heartrate <-  df %>%
subset(., type == "HKQuantityTypeIdentifierHeartRate" & sourceName == 'Apple Watch' & (year %in% c(2019, 2020))) %>%
select(., c("type", "date", "value", "year")) %>%
mutate(., day = format(date,"%m-%d")) %>%
group_by(date, type, year) %>%
summarize(min=min(value), mean=mean(value), max = max(value), sd=sd(value)) %>%
pivot_wider(., names_from = year, values_from = c(min, mean, max, sd))
heartrate <-  df %>%
subset(., type == "HKQuantityTypeIdentifierHeartRate" & sourceName == 'Apple Watch' & (year %in% c(2019, 2020))) %>%
select(., c("type", "date", "value", "year")) %>%
mutate(., day = format(date,"%m-%d")) %>%
group_by(date, type, year, day) %>%
summarize(min=min(value), mean=mean(value), max = max(value), sd=sd(value)) %>%
pivot_wider(., names_from = year, values_from = c(min, mean, max, sd))
heartrate <-  df %>%
subset(., type == "HKQuantityTypeIdentifierHeartRate" & sourceName == 'Apple Watch' & (year %in% c(2019, 2020))) %>%
select(., c("type", "date", "value", "year")) %>%
mutate(., day = format(date,"%m-%d")) %>%
group_by(type, year, day) %>%
summarize(min=min(value), mean=mean(value), max = max(value), sd=sd(value)) %>%
pivot_wider(., names_from = year, values_from = c(min, mean, max, sd))
summary(heartrate)
hr <- matrix(ncol = 2, nrow = 4)
rownames(da) <- c("Average Daily Minimum Heart Rate", "Average Daily Heart Rate", "Average Daily Maximum Heart Rate", "Average Daily Heart Rate SD")
colnames(da) <- c("2019", "2020")
hr
da <- matrix(ncol = 2, nrow = 3)
rownames(da) <- c("Daily Average Energy Burned", "Daily Average Time Spent Exercising", "Daily Average Walk/Run Distance")
colnames(da) <- c("2019", "2020")
### Daily Average Energy Burned
da[1,2] <- mean(watch_2019_wide$TotalEnergy, na.rm = TRUE)
da[1,1] <- mean(watch_2020_wide$TotalEnergy, na.rm = TRUE)
### Daily Average Exercise Time
da[2,1] <- mean(watch_2019_wide$ExerciseTime, na.rm = TRUE)
da[2,2] <- mean(watch_2020_wide$ExerciseTime, na.rm = TRUE)
### Daily Average Walk/Run Distance
da[3,1] <- mean(watch_2019_wide$WalkRunDistance, na.rm = TRUE)
da[3,2] <- mean(watch_2020_wide$WalkRunDistance, na.rm = TRUE)
hr <- matrix(ncol = 2, nrow = 4)
rownames(hr) <- c("Average Daily Minimum Heart Rate", "Average Daily Heart Rate", "Average Daily Maximum Heart Rate", "Average Daily Heart Rate SD")
colnames(hr) <- c("2019", "2020")
hr
hr <- matrix(ncol = 2, nrow = 4)
rownames(hr) <- c("Average Minimum Heart Rate", "Average Daily Heart Rate", "Average Maximum Heart Rate", "Daily Heart Rate SD")
colnames(hr) <- c("2019", "2020")
hr <- matrix(ncol = 2, nrow = 4)
rownames(hr) <- c("Average Minimum Heart Rate", "Average Daily Heart Rate", "Average Maximum Heart Rate", "Daily Heart Rate SD")
colnames(hr) <- c("2019", "2020")
### Min
hr[1,1] <- mean(heartrate$min_2019, na.rm = TRUE)
hr[1,2] <- mean(heartrate$min_2020, na.rm = TRUE)
### Mean
hr[2,1] <- mean(heartrate$mean_2019, na.rm = TRUE)
hr[2,2] <- mean(heartrate$mean_2020, na.rm = TRUE)
### Max
hr[3,1] <- mean(heartrate$max_2019, na.rm = TRUE)
hr[4,2] <- mean(heartrate$max_2020, na.rm = TRUE)
### SD
hr[4,1] <- mean(heartrate$sd_2019, na.rm = TRUE)
hr[4,2] <- mean(heartrate$sd_2020, na.rm = TRUE)
View(hr)
### Min
hr[1,1] <- mean(heartrate$min_2019, na.rm = TRUE)
hr[1,2] <- mean(heartrate$min_2020, na.rm = TRUE)
### Mean
hr[2,1] <- mean(heartrate$mean_2019, na.rm = TRUE)
hr[2,2] <- mean(heartrate$mean_2020, na.rm = TRUE)
### Max
hr[3,1] <- mean(heartrate$max_2019, na.rm = TRUE)
hr[3,2] <- mean(heartrate$max_2020, na.rm = TRUE)
### SD
hr[4,1] <- mean(heartrate$sd_2019, na.rm = TRUE)
hr[4,2] <- mean(heartrate$sd_2020, na.rm = TRUE)
sum(watch_2019_wide$TotalEnergy, na.rm = TRUE)
sum(watch_2020_wide$TotalEnergy, na.rm = TRUE)
713829.9 - 700825.8
View(dt)
### Daily Average Energy Burned
da[1,1] <- mean(watch_2019_wide$TotalEnergy, na.rm = TRUE)
da[1,2] <- mean(watch_2020_wide$TotalEnergy, na.rm = TRUE)
t.test(HeartRate ~ year, data = comb_data, paired = FALSE)
heartrate <-  df %>%
subset(., type == "HKQuantityTypeIdentifierHeartRate" & sourceName == 'Apple Watch' & (year %in% c(2019, 2020))) %>%
select(., c("type", "date", "value", "year")) %>%
mutate(., day = format(date,"%m-%d")) %>%
group_by(type, year, day) %>%
summarize(min=min(value), mean=mean(value), median = median(value), max = max(value), sd=sd(value)) %>%
pivot_wider(., names_from = year, values_from = c(min, mean, median, max, sd))
summary(heartrate)
View(watch)
heartrate <-  df %>%
subset(., type == "HKQuantityTypeIdentifierRestingHeartRate" & sourceName == 'Apple Watch' & (year %in% c(2019, 2020))) %>%
select(., c("type", "date", "value", "year"))
heartrate <-  df %>%
subset(., type == "HKQuantityTypeIdentifierRestingHeartRate" & sourceName == 'Apple Watch' & (year %in% c(2019, 2020))) %>%
select(., c("type", "date", "value", "year")) %>%
mutate(., day = format(date,"%m-%d")) %>%
group_by(type, year, day) %>%
summarize(min=min(value), mean=mean(value), median = median(value), max = max(value), sd=sd(value)) %>%
pivot_wider(., names_from = year, values_from = c(min, mean, median, max, sd))
summary(heartrate)
heartrate <-  df %>%
subset(., type == "HKQuantityTypeIdentifierHeartRate" & sourceName == 'Apple Watch' & (year %in% c(2019, 2020))) %>%
select(., c("type", "date", "value", "year")) %>%
mutate(., day = format(date,"%m-%d")) %>%
group_by(type, year, day) %>%
summarize(min=min(value), mean=mean(value), median = median(value), max = max(value), sd=sd(value)) %>%
pivot_wider(., names_from = year, values_from = c(min, mean, median, max, sd))
restinghr <-  df %>%
subset(., type == "HKQuantityTypeIdentifierRestingHeartRate" & sourceName == 'Apple Watch' & (year %in% c(2019, 2020))) %>%
select(., c("type", "date", "value", "year")) %>%
mutate(., day = format(date,"%m-%d")) %>%
group_by(type, year, day) %>%
summarize(min=min(value), mean=mean(value), median = median(value), max = max(value), sd=sd(value)) %>%
pivot_wider(., names_from = year, values_from = c(min, mean, median, max, sd))
View(restinghr)
stepcolormonth <- c("#79d1dd", "#fcbe4f", "#79d1dd", "#fcbe4f", "#79d1dd", "#fcbe4f", "#79d1dd", "#fcbe4f", "#79d1dd", "#fcbe4f", "#79d1dd", "#fcbe4f")
steps <- watch_2020_wide %>% group_by(month) %>%
ggplot(.) + #, group = as.factor(month), color = as.factor(month))) +
# geom_line(size = 0.3, color="orange") +
geom_col(aes(x=date, y=StepCount, fill = month), size = 0.5) +
geom_smooth(aes(x=date, y=StepCount), size = 0.7, colour = "#8d2f57", se = FALSE) + #fill = "#d51c4b") + #
# geom_text(position = position_stack(vjust = .5), family = "Helvetica") +
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
scale_fill_manual(values = stepcolormonth, guide = FALSE) +
# scale_y_continuous(labels = scales::comma, breaks = scales::pretty_breaks(n = 2500)) +
xlab("Month") +
ylab("Total Daily Steps") +
ggtitle("My daily step total in 2020") +
theme_bw() +
theme(plot.title = element_text(color="#8d2f57", size=14, face="bold.italic"),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
print(steps)
length(which(watch_2020_wide$StepCount > 10000))
length(which(watch_2019_wide$StepCount > 10000))
ex <- watch_2020_wide %>% group_by(month) %>%
ggplot(.) + #, group = as.factor(month), color = as.factor(month))) +
# geom_line(size = 0.3, color="orange") +
geom_col(aes(x=date, y=ExerciseTime, fill = month), size = 0.5) +
geom_smooth(aes(x=date, y=ExerciseTime), size = 0.7, colour = "#8d2f57", se = FALSE) + #fill = "#d51c4b") + #
# geom_text(position = position_stack(vjust = .5), family = "Helvetica") +
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
scale_fill_manual(values = stepcolormonth, guide = FALSE) +
# scale_y_continuous(labels = scales::comma, breaks = scales::pretty_breaks(n = 2500)) +
xlab("Month") +
ylab("Total Daily Exercise Time (in minutes)") +
ggtitle("How much of my day was spent exercising in 2020") +
theme_bw() +
theme(plot.title = element_text(color="#8d2f57", size=14, face="bold.italic"),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
print(ex)
ex <- watch_2019_wide %>% group_by(month) %>%
ggplot(.) + #, group = as.factor(month), color = as.factor(month))) +
# geom_line(size = 0.3, color="orange") +
geom_col(aes(x=date, y=ExerciseTime, fill = month), size = 0.5) +
geom_smooth(aes(x=date, y=ExerciseTime), size = 0.7, colour = "#8d2f57", se = FALSE) + #fill = "#d51c4b") + #
# geom_text(position = position_stack(vjust = .5), family = "Helvetica") +
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
scale_fill_manual(values = stepcolormonth, guide = FALSE) +
# scale_y_continuous(labels = scales::comma, breaks = scales::pretty_breaks(n = 2500)) +
xlab("Month") +
ylab("Total Daily Exercise Time (in minutes)") +
ggtitle("How much of my day was spent exercising in 2020") +
theme_bw() +
theme(plot.title = element_text(color="#8d2f57", size=14, face="bold.italic"),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
print(ex)
steps <- watch_2019_wide %>% group_by(month) %>%
ggplot(.) + #, group = as.factor(month), color = as.factor(month))) +
# geom_line(size = 0.3, color="orange") +
geom_col(aes(x=date, y=StepCount, fill = month), size = 0.5) +
geom_smooth(aes(x=date, y=StepCount), size = 0.7, colour = "#8d2f57", se = FALSE) + #fill = "#d51c4b") + #
# geom_text(position = position_stack(vjust = .5), family = "Helvetica") +
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
scale_fill_manual(values = stepcolormonth, guide = FALSE) +
# scale_y_continuous(labels = scales::comma, breaks = scales::pretty_breaks(n = 2500)) +
xlab("Month") +
ylab("Total Daily Steps") +
ggtitle("My daily step total in 2020") +
theme_bw() +
theme(plot.title = element_text(color="#8d2f57", size=14, face="bold.italic"),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
print(steps)
Nov26 <- watch_2020_wide[date == "2020-11-26",]
View(watch_2019_wide)
Nov26 <- watch_2020_wide[date == 2020-11-26,]
View(watch_2020_wide)
Nov26 <- watch_2020_wide[date = "2020-11-26",]
Nov26 <- subset(watch_2020_wide, date = "2020-11-26")
View(Nov26)
Nov26 <- subset(watch_2020_wide, date == "2020-11-26")
names(Nov26)
Nov26
Nov26 <- subset(watch_2020_wide, date == "2020-11-26") %>%
select(., c("date", "ExerciseTime", "StandTimeHr", "WalkRunDistance", "StepCount", "TotalEnergy"))
Nov26 <- subset(watch_2020_wide, date == "2020-11-26") %>%
select(., c("date", "ExerciseTime", "StandTimeHr", "WalkRunDistance", "StepCount", "TotalEnergy")) %>%
column_to_rownames(., date = "rowname")
Nov26 <- subset(watch_2020_wide, date == "2020-11-26") %>%
select(., c("date", "ExerciseTime", "StandTimeHr", "WalkRunDistance", "StepCount", "TotalEnergy")) %>%
column_to_rownames(., date)
Nov26 <- subset(watch_2020_wide, date == "2020-11-26") %>%
select(., c("date", "ExerciseTime", "StandTimeHr", "WalkRunDistance", "StepCount", "TotalEnergy")) %>%
column_to_rownames(., "date")
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)
library(lubridate)
library(XML)
library(ComplexHeatmap)
library(circlize)
xml <- xmlParse("~/Documents/Personal/Shiny_Apps/apple_watch_vis/apple_health_export_Jan2021/export.xml")
df <- XML:::xmlAttrsToDataFrame(xml["//Record"])
str(df)
df$value <- as.numeric(as.character(df$value))
str(df)
df$endDate <-ymd_hms(df$endDate,tz="America/Chicago")
str(df)
df$month<-format(df$endDate,"%m")
df$year<-format(df$endDate,"%Y")
df$date<-format(df$endDate,"%Y-%m-%d") %>% as.Date()
df$dayofweek <-wday(df$endDate, label=TRUE, abbr=FALSE)
df$hour <-format(df$endDate,"%H")
str(df)
levels(df$sourceName)[11] <- "Apple Watch"
watch <- df %>% filter(sourceName == "Apple Watch")
## 2019 Data Wrangling
watch_2019 <-  df %>%
subset(., (type %in% c("HKQuantityTypeIdentifierStepCount","HKQuantityTypeIdentifierDistanceCycling", "HKQuantityTypeIdentifierActiveEnergyBurned", "HKQuantityTypeIdentifierAppleExerciseTime",
"HKQuantityTypeIdentifierAppleStandTime", "HKQuantityTypeIdentifierBasalEnergyBurned", "HKQuantityTypeIdentifierDistanceWalkingRunning",
"HKQuantityTypeIdentifierHeartRate")) & sourceName == 'Apple Watch' & year == 2019) %>%
select(., c("type", "date", "value"))
watch_2019_long <- df %>%
subset(., (type %in% c("HKQuantityTypeIdentifierStepCount","HKQuantityTypeIdentifierDistanceCycling", "HKQuantityTypeIdentifierActiveEnergyBurned", "HKQuantityTypeIdentifierAppleExerciseTime",
"HKQuantityTypeIdentifierAppleStandTime", "HKQuantityTypeIdentifierBasalEnergyBurned", "HKQuantityTypeIdentifierDistanceWalkingRunning",
"HKQuantityTypeIdentifierHeartRate")) & sourceName == 'Apple Watch' & year == 2019) %>%
select(., c("type", "date", "value")) %>%
mutate(., stat = ifelse(type == "HKQuantityTypeIdentifierHeartRate", 2, 1)) %>%
group_by(date, stat, type) %>%
summarize(sum=sum(value[stat == 1]), mean=mean(value[stat == 2])) %>%
mutate(., value = ifelse(is.na(mean), sum, mean)) %>%
ungroup(., -stat) %>%
select(., -c("stat", "sum", "mean"))
watch_2019_wide <- df %>%
subset(., (type %in% c("HKQuantityTypeIdentifierStepCount","HKQuantityTypeIdentifierDistanceCycling",
"HKQuantityTypeIdentifierActiveEnergyBurned", "HKQuantityTypeIdentifierAppleExerciseTime",
"HKQuantityTypeIdentifierAppleStandTime", "HKQuantityTypeIdentifierBasalEnergyBurned",
"HKQuantityTypeIdentifierDistanceWalkingRunning", "HKQuantityTypeIdentifierHeartRate")) &
sourceName == 'Apple Watch' & year == 2019) %>%
select(., c("type", "date", "value")) %>%
mutate(., stat = ifelse(type == "HKQuantityTypeIdentifierHeartRate", 2, 1)) %>%
group_by(date, stat, type) %>%
summarize(sum=sum(value[stat == 1]), mean=mean(value[stat == 2])) %>%
mutate(., value = ifelse(is.na(mean), sum, mean)) %>%
ungroup(., -stat) %>%
select(., -c("stat", "sum", "mean")) %>%
spread(., type, value) %>%
mutate(., month = format(date,"%m")) %>%
rename(., StepCount = HKQuantityTypeIdentifierStepCount, Cycling = HKQuantityTypeIdentifierDistanceCycling,
ActiveEnergy = HKQuantityTypeIdentifierActiveEnergyBurned, ExerciseTime = HKQuantityTypeIdentifierAppleExerciseTime,
StandTime = HKQuantityTypeIdentifierAppleStandTime, BasalEnergy = HKQuantityTypeIdentifierBasalEnergyBurned,
WalkRunDistance = HKQuantityTypeIdentifierDistanceWalkingRunning, HeartRate = HKQuantityTypeIdentifierHeartRate)
watch_2019_wide$TotalEnergy <- watch_2019_wide$ActiveEnergy + watch_2019_wide$BasalEnergy
watch_2019_wide$StandTimeHr <- watch_2019_wide$StandTime / 10
## 2020 Data Wrangling
watch_2020 <-  df %>%
subset(., (type %in% c("HKQuantityTypeIdentifierStepCount","HKQuantityTypeIdentifierDistanceCycling", "HKQuantityTypeIdentifierActiveEnergyBurned", "HKQuantityTypeIdentifierAppleExerciseTime",
"HKQuantityTypeIdentifierAppleStandTime", "HKQuantityTypeIdentifierBasalEnergyBurned", "HKQuantityTypeIdentifierDistanceWalkingRunning",
"HKQuantityTypeIdentifierHeartRate")) & sourceName == 'Apple Watch' & year == 2020) %>%
select(., c("type", "date", "value"))
watch_2020_long <- df %>%
subset(., (type %in% c("HKQuantityTypeIdentifierStepCount","HKQuantityTypeIdentifierDistanceCycling", "HKQuantityTypeIdentifierActiveEnergyBurned", "HKQuantityTypeIdentifierAppleExerciseTime",
"HKQuantityTypeIdentifierAppleStandTime", "HKQuantityTypeIdentifierBasalEnergyBurned", "HKQuantityTypeIdentifierDistanceWalkingRunning",
"HKQuantityTypeIdentifierHeartRate")) & sourceName == 'Apple Watch' & year == 2020) %>%
select(., c("type", "date", "value")) %>%
mutate(., stat = ifelse(type == "HKQuantityTypeIdentifierHeartRate", 2, 1)) %>%
group_by(date, stat, type) %>%
summarize(sum=sum(value[stat == 1]), mean=mean(value[stat == 2])) %>%
mutate(., value = ifelse(is.na(mean), sum, mean)) %>%
ungroup(., -stat) %>%
select(., -c("stat", "sum", "mean"))
watch_2020_wide <- df %>%
subset(., (type %in% c("HKQuantityTypeIdentifierStepCount","HKQuantityTypeIdentifierDistanceCycling",
"HKQuantityTypeIdentifierActiveEnergyBurned", "HKQuantityTypeIdentifierAppleExerciseTime",
"HKQuantityTypeIdentifierAppleStandTime", "HKQuantityTypeIdentifierBasalEnergyBurned",
"HKQuantityTypeIdentifierDistanceWalkingRunning", "HKQuantityTypeIdentifierHeartRate")) &
sourceName == 'Apple Watch' & year == 2020) %>%
select(., c("type", "date", "value")) %>%
mutate(., stat = ifelse(type == "HKQuantityTypeIdentifierHeartRate", 2, 1)) %>%
group_by(date, stat, type) %>%
summarize(sum=sum(value[stat == 1]), mean=mean(value[stat == 2])) %>%
mutate(., value = ifelse(is.na(mean), sum, mean)) %>%
ungroup(., -stat) %>%
select(., -c("stat", "sum", "mean")) %>%
spread(., type, value) %>%
mutate(., month = format(date,"%m")) %>%
rename(., StepCount = HKQuantityTypeIdentifierStepCount, Cycling = HKQuantityTypeIdentifierDistanceCycling,
ActiveEnergy = HKQuantityTypeIdentifierActiveEnergyBurned, ExerciseTime = HKQuantityTypeIdentifierAppleExerciseTime,
StandTime = HKQuantityTypeIdentifierAppleStandTime, BasalEnergy = HKQuantityTypeIdentifierBasalEnergyBurned,
WalkRunDistance = HKQuantityTypeIdentifierDistanceWalkingRunning, HeartRate = HKQuantityTypeIdentifierHeartRate)
watch_2020_wide$TotalEnergy <- watch_2020_wide$ActiveEnergy + watch_2020_wide$BasalEnergy
watch_2020_wide$StandTimeHr <- watch_2020_wide$StandTime / 10
dt <- matrix(ncol = 2, nrow = 3)
rownames(dt) <- c("Total Energy Burned", "Total Time Spent Exercising", "Total Standing Hours")
colnames(dt) <- c("2019", "2020")
### Total Energy Burned
dt[1,2] <- sum(watch_2020_wide$TotalEnergy, na.rm = TRUE)
dt[1,1] <- sum(watch_2019_wide$TotalEnergy, na.rm = TRUE)
### Total Exercise Time
dt[2,1] <- sum(watch_2019_wide$ExerciseTime, na.rm = TRUE)
dt[2,2] <- sum(watch_2020_wide$ExerciseTime, na.rm = TRUE)
### Total Stand Time
dt[3,1] <- sum(watch_2019_wide$StandTimeHr, na.rm = TRUE)
dt[3,2] <- sum(watch_2020_wide$StandTimeHr, na.rm = TRUE)
knitr::kable(dt)
write.table(watch_2020_wide, "apple_health_export_Jan2021/watch_2020_wide.txt", sep = "\t", col.names = TRUE, rrow.names = FALSE, quote = TRUE)
write.table(watch_2020_wide, "apple_health_export_Jan2021/watch_2020_wide.txt", sep = "\t", col.names = TRUE, row.names = FALSE, quote = TRUE)
write.table(watch_2020_wide, "/apple_health_export_Jan2021/watch_2020_wide.txt", sep = "\t", col.names = TRUE, row.names = FALSE, quote = TRUE)
write.table(watch_2020_wide, "~/Documents/Personal/Shiny_Apps/apple_watch_vis/apple_health_export_Jan2021/watch_2020_wide.txt", sep = "\t", col.names = TRUE, row.names = FALSE, quote = TRUE)
write.table(watch_2020_long, "~/Documents/Personal/Shiny_Apps/apple_watch_vis/apple_health_export_Jan2021/watch_2020_long.txt", sep = "\t", col.names = TRUE, row.names = FALSE, quote = TRUE)
write.table(watch_2019_wide, "~/Documents/Personal/Shiny_Apps/apple_watch_vis/apple_health_export_Jan2021/watch_2019_wide.txt", sep = "\t", col.names = TRUE, row.names = FALSE, quote = TRUE)
write.table(watch_2019_long, "~/Documents/Personal/Shiny_Apps/apple_watch_vis/apple_health_export_Jan2021/watch_2019_long.txt", sep = "\t", col.names = TRUE, row.names = FALSE, quote = TRUE)
View(heartrate)
write.table(heartrate, "~/Documents/Personal/Shiny_Apps/apple_watch_vis/apple_health_export_Jan2021/heartrate_2020.txt", sep = "\t", col.names = TRUE, row.names = FALSE, quote = TRUE)
write.table(restinghr, "~/Documents/Personal/Shiny_Apps/apple_watch_vis/apple_health_export_Jan2021/restinghr_2020.txt", sep = "\t", col.names = TRUE, row.names = FALSE, quote = TRUE)
library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)
library(lubridate)
library(XML)
library(ComplexHeatmap)
library(circlize)
watch_2019_wide <- fread("~/Documents/Personal/Shiny_Apps/apple_watch_vis/apple_health_export_Jan2021/watch_2019_wide.txt")
install.packages("kableExtra")
watch_2019_wide <- fread("~/Documents/Personal/Shiny_Apps/apple_watch_vis/apple_health_export_Jan2021/watch_2019_wide.txt")
library(data.table)
test <-fread("~/Documents/Personal/Shiny_Apps/apple_watch_vis/apple_health_export_Jan2021/watch_2019_wide.txt")
str(test)
test <-fread("~/Documents/Personal/Shiny_Apps/apple_watch_vis/apple_health_export_Jan2021/watch_2019_wide.txt") %>% mutate(., date = as.Date())
test <-fread("~/Documents/Personal/Shiny_Apps/apple_watch_vis/apple_health_export_Jan2021/watch_2019_wide.txt") %>% mutate(., date = as.Date())
test <-fread("~/Documents/Personal/Shiny_Apps/apple_watch_vis/apple_health_export_Jan2021/watch_2019_wide.txt") %>% mutate(., date = as.Date(date))
str(test)
str(watch_2020_wide)
save(list = ls(c("watch_2019_wide", "watch_2020_wide", "heartrate", "restinghr")), file= "watch_vis.rda")
save(list = ls(c(watch_2019_wide, watch_2020_wide, heartrate, restinghr)), file= "watch_vis.rda")
save(list = c(watch_2019_wide, watch_2020_wide, heartrate, restinghr), file= "watch_vis.rda")
save(list = c("watch_2019_wide", "watch_2020_wide", "heartrate", "restinghr"), file= "watch_vis.rda")
getwd()
load("/Users/manansa2/watch_vis.rda")
dt %>% kableExtra::kbl()
save(list = c("watch_2019_wide", "watch_2020_wide", "heartrate", "restinghr", "Nov26"), file= "Documents/Personal/blog/blogdown_source/static/post/watch_vis.rda")
da
### Daily Average Energy Burned
da[1,1] <- round(mean(watch_2019_wide$TotalEnergy, na.rm = TRUE), 2)
da
### Daily Average Energy Burned
da[1,1] <- signif(mean(watch_2019_wide$TotalEnergy, na.rm = TRUE), 2)
da
### Daily Average Energy Burned
da[1,1] <- mean(watch_2019_wide$TotalEnergy, na.rm = TRUE)
### Daily Average Energy Burned
da[1,1] <- round(mean(watch_2019_wide$TotalEnergy, na.rm = TRUE), digits = 2)
da
### Daily Average Energy Burned
da[1,1] <- format(round(mean(watch_2019_wide$TotalEnergy, na.rm = TRUE), digits = 2), nsmall = 2)
da
da[1,1] <- format(round(mean(watch_2019_wide$TotalEnergy, na.rm = TRUE), digits = 2), nsmall = 2)
da[1,2] <- format(round(mean(watch_2020_wide$TotalEnergy, na.rm = TRUE), digits = 2), nsmall = 2)
### Daily Average Exercise Time
da[2,1] <- format(round(mean(watch_2019_wide$ExerciseTime, na.rm = TRUE), digits = 2), nsmall = 2)
da[2,2] <- format(round(mean(watch_2020_wide$ExerciseTime, na.rm = TRUE), digits = 2), nsmall = 2)
### Daily Average Walk/Run Distance
da[3,1] <- format(round(mean(watch_2019_wide$WalkRunDistance, na.rm = TRUE), digits = 2), nsmall = 2)
da[3,2] <- format(round(mean(watch_2020_wide$WalkRunDistance, na.rm = TRUE), digits = 2), nsmall = 2)
da
### Daily Average Energy Burned
da[1,1] <- format(round(mean(watch_2019_wide$TotalEnergy, na.rm = TRUE), digits = 2), nsmall = 2,quote = FALSE)
da
da[1,1] <- mean(watch_2019_wide$TotalEnergy, na.rm = TRUE)
da[1,2] <- mean(watch_2020_wide$TotalEnergy, na.rm = TRUE)
### Daily Average Exercise Time
da[2,1] <- mean(watch_2019_wide$ExerciseTime, na.rm = TRUE)
da[2,2] <- mean(watch_2020_wide$ExerciseTime, na.rm = TRUE)
### Daily Average Walk/Run Distance
da[3,1] <- mean(watch_2019_wide$WalkRunDistance, na.rm = TRUE)
da[3,2] <- mean(watch_2020_wide$WalkRunDistance, na.rm = TRUE)
da
da <- matrix(ncol = 2, nrow = 3)
rownames(da) <- c("Daily Average Energy Burned", "Daily Average Time Spent Exercising", "Daily Average Walk/Run Distance")
colnames(da) <- c("2019", "2020")
### Daily Average Energy Burned
da[1,1] <- mean(watch_2019_wide$TotalEnergy, na.rm = TRUE)
da[1,2] <- mean(watch_2020_wide$TotalEnergy, na.rm = TRUE)
### Daily Average Exercise Time
da[2,1] <- mean(watch_2019_wide$ExerciseTime, na.rm = TRUE)
da[2,2] <- mean(watch_2020_wide$ExerciseTime, na.rm = TRUE)
### Daily Average Walk/Run Distance
da[3,1] <- mean(watch_2019_wide$WalkRunDistance, na.rm = TRUE)
da[3,2] <- mean(watch_2020_wide$WalkRunDistance, na.rm = TRUE)
da
### Daily Average Energy Burned
da[1,1] <- floor(mean(watch_2019_wide$TotalEnergy, na.rm = TRUE))
da
### Daily Average Energy Burned
da[1,1] <- sprintf("%.2f", mean(watch_2019_wide$TotalEnergy, na.rm = TRUE))
da
da <- matrix(ncol = 2, nrow = 3)
rownames(da) <- c("Daily Average Energy Burned", "Daily Average Time Spent Exercising", "Daily Average Walk/Run Distance")
colnames(da) <- c("2019", "2020")
### Daily Average Energy Burned
da[1,1] <- mean(watch_2019_wide$TotalEnergy, na.rm = TRUE)
da[1,2] <- mean(watch_2020_wide$TotalEnergy, na.rm = TRUE)
### Daily Average Exercise Time
da[2,1] <- mean(watch_2019_wide$ExerciseTime, na.rm = TRUE)
da[2,2] <- mean(watch_2020_wide$ExerciseTime, na.rm = TRUE)
### Daily Average Walk/Run Distance
da[3,1] <- mean(watch_2019_wide$WalkRunDistance, na.rm = TRUE)
da[3,2] <- mean(watch_2020_wide$WalkRunDistance, na.rm = TRUE)
round(da,2)
cyc <- watch_2020_wide %>% group_by(month) %>%
ggplot(.) + #, group = as.factor(month), color = as.factor(month))) +
# geom_line(size = 0.3, color="orange") +
geom_col(aes(x=date, y=Cycling, fill = month), size = 0.5) +
geom_smooth(aes(x=date, y=Cycling), size = 0.7, colour = "#8d2f57", se = FALSE) + #fill = "#d51c4b") + #
# geom_text(position = position_stack(vjust = .5), family = "Helvetica") +
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
scale_fill_manual(values = stepcolormonth, guide = FALSE) +
# scale_y_continuous(labels = scales::comma, breaks = scales::pretty_breaks(n = 2500)) +
xlab("Month") +
ylab("Total Cycling Distance (in miles)") +
ggtitle("How much I cycled in 2020 (not much, but more than usual)") +
theme_bw() +
theme(plot.title = element_text(color="#8d2f57", size=14, face="bold.italic"),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
print(cyc)
## Cycling - an activity I wish I could do more often
cyc <- watch_2020_wide %>% group_by(month) %>%
ggplot(.) + #, group = as.factor(month), color = as.factor(month))) +
# geom_line(size = 0.3, color="orange") +
geom_col(aes(x=date, y=Cycling, fill = month), size = 0.5) +
geom_smooth(aes(x=date, y=Cycling), size = 0.7, colour = "#8d2f57", se = FALSE) + #fill = "#d51c4b") + #
# geom_text(position = position_stack(vjust = .5), family = "Helvetica") +
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
# scale_fill_manual(values = stepcolormonth, guide = FALSE) +
# scale_y_continuous(labels = scales::comma, breaks = scales::pretty_breaks(n = 2500)) +
xlab("Month") +
ylab("Total Cycling Distance (in miles)") +
ggtitle("How much I cycled in 2020 (not much, but more than usual)") +
theme_bw() +
theme(plot.title = element_text(color="#8d2f57", size=14, face="bold.italic"),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
print(cyc)
## Cycling - an activity I wish I could do more often
cyc <- watch_2020_wide %>% group_by(month) %>%
ggplot(.) + #, group = as.factor(month), color = as.factor(month))) +
# geom_line(size = 0.3, color="orange") +
geom_col(aes(x=date, y=Cycling), size = 0.5, fill = "#79d1dd") +
geom_smooth(aes(x=date, y=Cycling), size = 0.7, colour = "#8d2f57", se = FALSE) + #fill = "#d51c4b") + #
# geom_text(position = position_stack(vjust = .5), family = "Helvetica") +
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
# scale_fill_manual(values = stepcolormonth, guide = FALSE) +
# scale_y_continuous(labels = scales::comma, breaks = scales::pretty_breaks(n = 2500)) +
xlab("Month") +
ylab("Total Cycling Distance (in miles)") +
ggtitle("How much I cycled in 2020 (not much, but more than usual)") +
theme_bw() +
theme(plot.title = element_text(color="#8d2f57", size=14, face="bold.italic"),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
print(cyc)
setwd("Documents/Personal/blog/blogdown_source/")
blogdown::serve_site()
